{"version":3,"file":"static/js/564.44985cf6.chunk.js","mappings":"yLAEaA,EAAeC,EAAAA,OAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+SAczBC,EAAeH,EAAAA,OAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4F,SCdxBG,EAAU,SAAHC,GAA6B,IAAvBC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAC/B,OACEC,EAAAA,EAAAA,MAACV,EAAY,CAAAS,SAAA,EACXE,EAAAA,EAAAA,KAACP,EAAY,CAAAK,SAAED,IACdC,IAGP,C,+HCPaG,EAAmBX,EAAAA,OAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qL,GAWVF,EAAAA,OAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kMAWTF,EAAAA,OAAAA,EAAQY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,mDAKdF,EAAAA,OAAAA,OAAaa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,qX,mBC1BzBY,EAAc,WAKzB,MAAO,CACLC,WALgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAM5BC,UALeF,EAAAA,EAAAA,IAAYG,EAAAA,IAM3BC,QALaJ,EAAAA,EAAAA,IAAYK,EAAAA,IAO7B,ECXaC,EAAatB,EAAAA,OAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yIAQvBqB,EAAkBvB,EAAAA,OAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wF,SCR1BsB,EAAe,SAAHlB,GAAqB,IAAfmB,EAAOnB,EAAPmB,QAC7B,OACEf,EAAAA,EAAAA,KAACY,EAAU,CAAAd,UACTE,EAAAA,EAAAA,KAACa,EAAe,CAAAf,SAAEiB,KAGxB,E,oBCNaC,EAAkB1B,EAAAA,OAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kMAW5ByB,EAAkB3B,EAAAA,OAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mDAK1B0B,EAAY5B,EAAAA,OAAAA,OAAaY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,qXCdzB2B,EAAU,SAAHvB,GAA6C,IAAvCwB,EAAExB,EAAFwB,GAAIC,EAAIzB,EAAJyB,KAAMC,EAAM1B,EAAN0B,OAC5BC,GADiD3B,EAAb4B,eACzBC,EAAAA,EAAAA,OAMjB,OACEzB,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAA5B,UACEC,EAAAA,EAAAA,MAACiB,EAAe,CAAAlB,SAAA,EACdC,EAAAA,EAAAA,MAACkB,EAAe,CAAAnB,SAAA,CAAC,SAAOuB,MACxBtB,EAAAA,EAAAA,MAACkB,EAAe,CAAAnB,SAAA,CAAC,WAASwB,MAC1BtB,EAAAA,EAAAA,KAACkB,EAAS,CAACS,KAAK,SAASC,QAAS,kBATZC,EASsCT,OARhEG,GAASO,EAAAA,EAAAA,IAAkBD,IADD,IAAAA,CASyC,EAAC/B,SAAC,aAH7CsB,IAS5B,E,UCwBA,EAvC2B,WACzB,IAAAW,EAAwC3B,IAAhCC,EAAS0B,EAAT1B,UAAWG,EAAQuB,EAARvB,SAAUE,EAAMqB,EAANrB,OAC7BsB,GAAsCC,EAAAA,EAAAA,UAASzB,GAAS0B,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,EAAsB,SAAAT,GAC1BQ,EAAeD,EAAY1B,QAAO,SAAA6B,GAAO,OAAIA,EAAQnB,KAAOS,CAAS,IACvE,EAEA,GAAIxB,EACF,OAAOL,EAAAA,EAAAA,KAACwC,EAAAA,EAAO,IAGjB,IAAMC,EAAmBjC,EAASE,QAAO,SAAA6B,GACvC,OACEA,EAAQlB,KAAKqB,cAAcC,SAASjC,EAAOgC,gBAC3CH,EAAQjB,OAAOqB,SAASjC,EAE5B,IAEA,OACEV,EAAAA,EAAAA,KAACC,EAAgB,CAAAH,SACM,IAApBU,EAASoC,QACR5C,EAAAA,EAAAA,KAACc,EAAY,CAACC,QAAQ,0BACpB0B,EAAiBG,OAAS,EAC5BH,EAAiBI,KAAI,SAAAjD,GAAA,IAAGwB,EAAExB,EAAFwB,GAAIC,EAAIzB,EAAJyB,KAAMC,EAAM1B,EAAN0B,OAAM,OACtCtB,EAAAA,EAAAA,KAACmB,EAAO,CAENC,GAAIA,EACJC,KAAMA,EACNC,OAAQA,EACRE,cAAec,GAJVlB,EAKL,KAGJpB,EAAAA,EAAAA,KAACc,EAAY,CAACC,QAAQ,0CAI9B,E,UC3Ca+B,EAAcxD,EAAAA,OAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6IAS1BuD,EAAQzD,EAAAA,OAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4SAepBwD,EAAa1D,EAAAA,OAAAA,EAAQY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,oECrBrByD,EAAS,WACpB,IAAQvC,EAAWN,IAAXM,OACFa,GAAWE,EAAAA,EAAAA,MAMjB,OACE1B,EAAAA,EAAAA,MAAC+C,EAAW,CAAAhD,SAAA,EACVE,EAAAA,EAAAA,KAACgD,EAAU,CAAAlD,SAAC,0BACZE,EAAAA,EAAAA,KAAC+C,EAAK,CACJ1B,KAAK,SACL6B,MAAOxC,EACPU,GAAG,SACHO,KAAK,OACLwB,YAAY,iBACZC,QAAQ,yHACRC,SAdqB,SAAAC,GACzB/B,GAASgC,EAAAA,EAAAA,IAAUD,EAAME,OAAON,OAClC,MAgBF,E,oBCzBaO,EAFMC,EAAQ,MAAnBpE,OAEqBqE,IAAGpE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2tBCkChC,EA3BqB,WACnB,IAAM+B,GAAWE,EAAAA,EAAAA,MAMjB,OAJAmC,EAAAA,EAAAA,YAAU,WACRrC,GAASsC,EAAAA,EAAAA,MACX,KAGE7D,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAA5B,UACEC,EAAAA,EAAAA,MAACJ,EAAAA,QAAO,CAAAG,SAAA,EACNE,EAAAA,EAAAA,KAACyD,EAAM,CAAA3D,UACLE,EAAAA,EAAAA,KAAC8D,EAAAA,GAAO,CAACC,UAAU,cAAcC,GAAG,kBAAiBlE,SAAC,6BAKxDE,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAACiD,EAAM,OAETjD,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAACiE,EAAW,UAKtB,C,wGChCO,IAAMxD,EAAiB,SAAAyD,GAAK,OAAIA,EAAM1D,SAASA,SAAS2D,KAAM,EAExDxD,EAAe,SAAAuD,GAAK,OAAIA,EAAM1D,SAASE,MAAO,EAE9CH,EAAgB,SAAA2D,GAAK,OAAIA,EAAM1D,SAASA,SAASH,SAAU,C","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactList/ContactList.styled.js","helpers/hookUseContacts.js","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/contactList.jsx","components/Filter/filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage/Contact.styled.js","pages/ContactsPage/ContactsPage.jsx","redux/selectors.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const SectionStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-top: 5px;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(\n    86deg,\n    rgba(134, 40, 80, 1) 0%,\n    rgba(113, 10, 52, 1) 22%,\n    rgba(112, 45, 51, 1) 63%,\n    rgba(133, 133, 133, 1) 100%\n  );\n`;\nexport const SectionTitle = styled.h2`\n  color: beige;\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 50px;\n`;\n","import { SectionStyle, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionStyle>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionStyle>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const ContactContainer = styled.ul`\n  display: flex;\n  width: 400px;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  padding: 1px 50px;\n  border-radius: 8px;\n  background-color: #fff;\n  position: relative;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  width: 100%;\n  flex-wrap: nowrap;\n  padding: 0;\n  justify-content: space-around;\n  align-items: center;\n  gap: 20px;\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const ContactItemText = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const DeleteBtn = styled.button`\n  width: 65px;\n  padding: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  background: rgba(223, 125, 125, 0.5);\n  color: #801919;\n  cursor: pointer;\n  border-radius: 7px;\n  border: #0004ff;\n  transition: background 0.3s, color 0.3s;\n\n  &:hover {\n    background: rgba(223, 125, 125, 0.8);\n    color: white;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter, selectLoading } from 'redux/selectors';\n\nexport const useContacts = () => {\n  const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  return {\n    isLoading,\n    contacts,\n    filter,\n  };\n};\n","import { styled } from 'styled-components';\n\nexport const NotifyText = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 0;\n  padding: 0;\n  margin-bottom: 50px;\n`;\nexport const NotifyParagraph = styled.p`\n  font-size: 25px;\n  font-weight: 600;\n  color: red;\n  margin-left: 50px;\n`;\n","import { NotifyParagraph, NotifyText } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return (\n    <NotifyText>\n      <NotifyParagraph>{message}</NotifyParagraph>\n    </NotifyText>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const ContactListItem = styled.div`\n  display: flex;\n  width: 100%;\n  flex-wrap: nowrap;\n  padding: 0;\n  justify-content: space-around;\n  align-items: center;\n  gap: 20px;\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const ContactItemText = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const DeleteBtn = styled.button`\n  width: 65px;\n  padding: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  background: rgba(223, 125, 125, 0.5);\n  color: #801919;\n  cursor: pointer;\n  border-radius: 7px;\n  border: #0004ff;\n  transition: background 0.3s, color 0.3s;\n\n  &:hover {\n    background: rgba(223, 125, 125, 0.8);\n    color: white;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContactById } from 'redux/contactsOperations';\nimport { ContactItemText, ContactListItem, DeleteBtn } from './Contact.styled';\n\nexport const Contact = ({ id, name, number, deleteContact }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactById(contactId));\n  };\n\n  return (\n    <>\n      <ContactListItem key={id}>\n        <ContactItemText>Name: {name}</ContactItemText>\n        <ContactItemText>Number: {number}</ContactItemText>\n        <DeleteBtn type=\"button\" onClick={() => handleDeleteContact(id)}>\n          Delete\n        </DeleteBtn>\n      </ContactListItem>\n    </>\n  );\n};\n","import { ContactContainer } from './ContactList.styled';\nimport { useContacts } from 'helpers/hookUseContacts';\nimport { Notification } from 'components/Notification/Notification';\nimport { Loading } from 'components/Loader/Loader';\nimport { Contact } from 'components/Contact/Contact';\nimport { useState } from 'react';\n\nexport const ContactList = () => {\n  const { isLoading, contacts, filter } = useContacts();\n  const [contactList, setContactList] = useState(contacts);\n\n  const handleDeleteContact = contactId => {\n    setContactList(contactList.filter(contact => contact.id !== contactId));\n  };\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  const filteredContacts = contacts.filter(contact => {\n    return (\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n    );\n  });\n\n  return (\n    <ContactContainer>\n      {contacts.length === 0 ? (\n        <Notification message=\"There are no contacts\" />\n      ) : filteredContacts.length > 0 ? (\n        filteredContacts.map(({ id, name, number }) => (\n          <Contact\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            deleteContact={handleDeleteContact}\n          />\n        ))\n      ) : (\n        <Notification message=\"There are no contacts for this match\" />\n      )}\n    </ContactContainer>\n  );\n};\nexport default ContactList;\n","import { styled } from 'styled-components';\n\nexport const FilterStyle = styled.label`\n  display: flex;\n  width: 300px;\n  margin-left: 50px;\n  flex-direction: column;\n  padding-left: 10px;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  width: 280px;\n  height: 20px;\n  margin-bottom: 30px;\n  background: rgba(0, 0, 0, 0.19);\n  border: none;\n  outline: none;\n  padding: 7px;\n  font-size: 20px;\n  color: #frf;\n  text-shadow: 1px 1px rgba(0, 0, 0, 0.2);\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 4px;\n`;\n\nexport const FilterText = styled.p`\n  font-size: 22px;\n  font-weight: 500;\n  color: beige;\n`;\n","import { useContacts } from 'helpers/hookUseContacts';\nimport { useDispatch } from 'react-redux';\nimport { addFilter } from 'redux/contactsSlice';\nimport { FilterStyle, FilterText, Input } from './filter.styled';\n\nexport const Filter = () => {\n  const { filter } = useContacts();\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(addFilter(event.target.value));\n  };\n\n  return (\n    <FilterStyle>\n      <FilterText>Find contact by name</FilterText>\n      <Input\n        name=\"filter\"\n        value={filter}\n        id=\"filter\"\n        type=\"text\"\n        placeholder=\"Search contacs\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={handleFilterChange}\n      />\n    </FilterStyle>\n  );\n};\n","const { styled } = require('styled-components');\n\nexport const Wraper = styled.div`\n  align-items: center;\n  .link {\n    display: inline-block;\n    text-decoration: none;\n    font-size: 20px;\n    font-weight: 600;\n    color: beige;\n    padding: 13px;\n    &:hover,\n    &:focus {\n      color: rgb(222, 155, 28);\n    }\n  }\n  .navBtn {\n    display: inline-block;\n    zoom: 1;\n    padding: 7px 20px 7px;\n    margin-bottom: 0;\n    font-size: 25px;\n    line-height: 18px;\n    text-align: center;\n    background-color: rgb(290, 255, 233);\n    color: rgb(41, 18, 18);\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    border-radius: 20px;\n    margin-left: 35px;\n    margin-top: -45px;\n    &: hover {\n      background: rgba(223, 125, 125, 0.8);\n      color: white;\n    }\n  }\n`;\n","import ContactList from 'components/ContactList/contactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Section } from 'components/Section/Section';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getAllContacts } from 'redux/contactsOperations';\nimport { Wraper } from './Contact.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  });\n\n  return (\n    <>\n      <Section>\n        <Wraper>\n          <NavLink className=\"link navBtn\" to=\"/newaccountpage\">\n            Return to add account\n          </NavLink>\n        </Wraper>\n\n        <div>\n          <Filter />\n        </div>\n        <div>\n          <ContactList />\n        </div>\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectLoading = state => state.contacts.contacts.isLoading;\n// export const selectFilteredContacts = createSelector(\n//   [selectContacts, selectFilter],\n//   (contacts, filter) => {\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   }\n// );\n"],"names":["SectionStyle","styled","_templateObject","_taggedTemplateLiteral","SectionTitle","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","ContactContainer","_templateObject3","_templateObject4","useContacts","isLoading","useSelector","selectLoading","contacts","selectContacts","filter","selectFilter","NotifyText","NotifyParagraph","Notification","message","ContactListItem","ContactItemText","DeleteBtn","Contact","id","name","number","dispatch","deleteContact","useDispatch","_Fragment","type","onClick","contactId","deleteContactById","_useContacts","_useState","useState","_useState2","_slicedToArray","contactList","setContactList","handleDeleteContact","contact","Loading","filteredContacts","toLowerCase","includes","length","map","FilterStyle","Input","FilterText","Filter","value","placeholder","pattern","onChange","event","addFilter","target","Wraper","require","div","useEffect","getAllContacts","NavLink","className","to","ContactList","state","items"],"sourceRoot":""}